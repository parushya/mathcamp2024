[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Math Camp 2024",
    "section": "",
    "text": "Welcome to the Math Camp 2024, organised by the Department of Government, Georgetown University.",
    "crumbs": [
      "Instructors"
    ]
  },
  {
    "objectID": "index.html#instructors",
    "href": "index.html#instructors",
    "title": "Math Camp 2024",
    "section": "Instructors",
    "text": "Instructors\nMohammad Hashem Krayem\n\nPh.D. Student (3rd Year), International Relations\nmhk62@georgetown.edu\n\nParushya,\n\nPh.D. Student (3rd Year), Comparative Government\npp714@georgetown.edu",
    "crumbs": [
      "Instructors"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Math Camp 2024",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nThanks to Henry Watson and Ankushi Mitra for sharing the teaching material from previous editions of Maths Camp.",
    "crumbs": [
      "Instructors"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Math Camp is an intensive week-long course designed to refresh mathematical concepts that Ph.D. students will use in their quantitative research methods classes. This course will reintroduce students to basic topics in probability, linear algebra, and calculus through lectures, problem sets, and home work assignments. Students will also be exposed to the statistical software package R through a series of daily labs.\nYou can find the course syllabus and material from classes here.\nClasses would take place between 9 - 4 pm in ICC 234.\n\n\n\n\n\nSchedule for the Week",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "day1.html",
    "href": "day1.html",
    "title": "Day 1 - Software",
    "section": "",
    "text": "Math Session\nNotation, Functions, and Limits\nLinks",
    "crumbs": [
      "Day 1 - Software"
    ]
  },
  {
    "objectID": "day1.html#math-session",
    "href": "day1.html#math-session",
    "title": "Day 1 - Software",
    "section": "",
    "text": "Measurement and notation\nReview Basic Algebra\nFunctions\nLimits and Series\n\n\n\nLecture slides here\nProblem set here",
    "crumbs": [
      "Day 1 - Software"
    ]
  },
  {
    "objectID": "day1.html#software-session",
    "href": "day1.html#software-session",
    "title": "Day 1 - Software",
    "section": "Software Session",
    "text": "Software Session\nWe will be getting started with the following installations today:\n\nR - Statistical Programming Language\nRStudio - Interactive Development Environment for R\nStata - Statistical Software Package (the “other” one)\nZotero - Reference Management Tool\nGitHub - Storing code online with version control\n\n\nR and R Studio\nUse the link here to install RStudio on your systems.\n\n\nStata\nStata is a paid software. Georgetown provides download option through the university webstore here.\n\n\nZotero\nZotero is a reference management tool. It allows you to maintain a structured bibliography. Its integration with various web browsers and software like MS Word and R, makes it a fantastic tool for keeping track of readings as well as citing them.\n\n\n\n\n\nZotero Folder\n\n\n\n\n\nMake Zotero Account.\nAdd a connector to the browser (For eg, zotero connector for google chrome).\nDownload Zotero Desktop App here.\nConnect Zotero to R Studio. (We will do this step on Day 5, using the link here).\n\n\n\nGitHub\nMake your account here",
    "crumbs": [
      "Day 1 - Software"
    ]
  },
  {
    "objectID": "day2.html",
    "href": "day2.html",
    "title": "Day 2 - R Basics",
    "section": "",
    "text": "Math Session\nLinear Algebra\nLinks",
    "crumbs": [
      "Day 2 - R Basics"
    ]
  },
  {
    "objectID": "day2.html#why-programming-or-coding",
    "href": "day2.html#why-programming-or-coding",
    "title": "Day 2 - R Basics",
    "section": "Why Programming or Coding?",
    "text": "Why Programming or Coding?\nThere are a lot of fancy answers to it. But the key idea is that you want to be lazy about repetitive tasks (MBAs call it being “productive”).\nMany tasks - data cleaning, wrangling, visualization, and statistical analysis - require you to do them many times. Moreover, you would want to be able to reproduce and replicate your thinking about all of the tasks mentioned above on many different datasets and sometimes even on the same dataset after some time.\nCoding is about formalizing your thinking about how you treat the data and automating the formalization task to be done repetitively. It improves efficiency, enhances reproducibility, and boosts creativity when it comes to finding new patterns in your data.\nGuidelines for data and statistical analyses:1\n\nAccuracy: Write a code that reduces the chances of making an error and lets you catch one if it occurs.\nEfficiency: If you are doing it twice, see the pattern of your decision-making and formalize it in your code. Difference between Excel and coding\nReplicate-and-Reproduce: Ability to repeat the computational process which reflects your thinking and decisions that you took along the way. Improves transparency and forces one to be deliberate and responsible about choices during analyses.\n\nHuman Interpretability: Writing code is not just about analyzing but allowing yourself and then others to be able to understand your analytic choices.\n\nPublic Good: Research is a public good. And the code allows your research to be truly accessible. This means you write a code that anyone else who understands the language can read, reuse, and recreate without you being present. We essentially ensure that by writing a readable and ideally publicly accessible code.",
    "crumbs": [
      "Day 2 - R Basics"
    ]
  },
  {
    "objectID": "day2.html#r-and-rstudio",
    "href": "day2.html#r-and-rstudio",
    "title": "Day 2 - R Basics",
    "section": "R and RStudio",
    "text": "R and RStudio\nR is a free open-source statistical programming language. We generally use R through RStudio which is an integrated development environment (IDE). Essentially, it is the graphic user interface that allows us to use R efficiently. It has point-and-click functionality also (which we would not use a lot).\n\n\n\n\n\nRStudio Screen\n\n\n\n\nR Scripts: This is where put your code in a script. The script is saved with a .R extension. An R script is a text file that you can read on text editors too. We use RStudio to run the code in a way that the computer understands.\nConsole: Output from your code appears here. You can also write the code directly here. But it does not get saved. Also, by default, it shows only a limited number of previous steps (commands + outputs). Not a good practice to code here.\nEnvironment: All the objects, datasets, lists, etc that you have created/loaded in the environment appear here. Alongside, you also see the custom functions that you might create.\nFile Browser/Help/Plot: Internal file navigator and help documentation for packages and functions appear here. Further, when you plot anything, that also gets shown here.\nComments: R interprets every line in the script as a separate command. And it does for each line unless preceded by a #. Comments signal to R that what follows the # is to be ignored.We use comments to write explanatory notes about the code. A comment should explain the purpose of a command or code and not just be a description of what it does.",
    "crumbs": [
      "Day 2 - R Basics"
    ]
  },
  {
    "objectID": "day2.html#basics",
    "href": "day2.html#basics",
    "title": "Day 2 - R Basics",
    "section": "Basics",
    "text": "Basics\nR uses &lt;- as the assignment operator. To the left of it is an object (sort of like a box that stores values which are to the right of the operator).\nSyntax: object &lt;- value/data\n\nExercise 1Code 1\n\n\n\nCreate a new .R script. Name it and save it on your system.\n\nR does all the functions of a calculator. Write some code in the script that\n\n\nAdds two numbers\nMultiplies three numbers\nPrints your name\n\n\nRun each command separately by using cmd + Enter / ctrl + Enter.\nAssign the outputs from 2 to different objects.\nPrint the objects with some description using paste().\nRun the whole file.\n\n\n\nYou can start a new script through many different ways:\n\nctrl + shift + n\nClick on the tiny white page button with a green+sign on the upper left corner of the screen\nClick on File &gt; New file&gt; R script\n\nSaving a script:\n\nCtrl + S\nEnter the name of the script, and add .R as a suffix. For example: xyzbasic.R\n\n\n#2. \n2 + 7\n\n56 * 9 * 33\n\nprint(\"Parushya\")\n\nThe output is displayed in the console.\n\n#4\n\n\nsum_2 &lt;- 2 + 7\n\nprod_3 &lt;- 56 * 9 * 33\n\nname &lt;- \"parushya\"\n\n\n#5\n\npaste(\"Sum of 2 and 7 is\", sum_2)\n\npaste(\"Product of 56, 9 and 33 is\", prod_3)\n\npaste(\"This very fancy R code was written by\", name)",
    "crumbs": [
      "Day 2 - R Basics"
    ]
  },
  {
    "objectID": "day2.html#objects-datatypes-and-data-structures",
    "href": "day2.html#objects-datatypes-and-data-structures",
    "title": "Day 2 - R Basics",
    "section": "Objects, Datatypes, and Data Structures",
    "text": "Objects, Datatypes, and Data Structures\n\n\n\n\n\n\nExercise 2\n\n\n\nRun the following code in the same script that we created\n\nclass(sum_2)\n\nclass(prod_3)\n\nclass(name)\n\n\n\nEverything in R is called an “object”\n“Objects” contain “data”.\nThe three variables we created - sum_2, prod_3, and name - were all basic objects.\nR has 5 basic or “atomic” classes/datatypes of objects.\n\nCharacter - (abc)\nNumeric - (real numbers) - (1,7.5,etc)\nInteger - (1,2,0,-896)\nLogical - (True/False)\nComplex - (1, 0+i)\n\nData structures are bigger containers that hold many objects.\nTwo basic or “atomic” data structures in R are:\n\nVectors: can hold objects of same datatype\nLists: can hold objects with different datatypes\n\n\n\n\n\n\n\nUnderstanding Vectors\n\n\n\nWe can create a vector using the “c()” command.\n\na_num &lt;- c(0,0.7,9,2,3,4,-1)            # numeric or double\n\nb_logical &lt;- c(TRUE,FALSE,TRUE,TRUE,TRUE) # logical\n\nc_logical &lt;- c(T,F,T,T,T) # also logical - Never use T and F as it leads to errors in analysis\n\nd_char &lt;- c(\"Sheila\", \"Nila\", \"Camilla\")  # character\n\ne_int &lt;- 1:20 # integer\n\nf_int &lt;- c(1,2,3,4,5)  # integer\n\ng_int &lt;- c(1+0i,2+4i) # complex numbers\n\nBasic vectors are uni-dimensional. We can make a two dimensional vector, which is called matrix.\n\nWorking with matrices\n\n# Creating Blank Matrix\nm_1 &lt;- matrix(nrow=3,ncol=4)\nm_1      \n\n     [,1] [,2] [,3] [,4]\n[1,]   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA\n\ndim(m_1)\n\n[1] 3 4\n\n\n\n?matrix # Help documentation\n\n# Creating Matrix with elements\n\nm_2 &lt;- matrix(1:10, nrow = 3, ncol = 4) # Why the warning?\nm_2\n\n# With correct number of elements\nm_3 &lt;- matrix(1:18, nrow=9, ncol=2))\nm3\n\nLogic of matrices\nMatrices are constructed column-wise. So, it fills the upper left corner, and then runs down along.\nIndexing in matrices\n\n# Rows & Columns ----    \n# Very simply the syntax is:  (2,3) = (Rows, Columns)\n# m[1,] - 1st row\n# m[2,] - 2nd row\n# m[,3] - 3rd column  \n# m[,5] - 5th column\n# m[,7] - 7th column\n\n\n# What if you already have a vector?\n# Example: You have received a list of students who have skipped school today.\n# You know which section they are in, and want to create a matrix.\nk &lt;- c(\"Hashem\", \"John\", \"Cecillia\", \"Minha\", \"Parushya\", \"Keeheon\")\nk\n\n[1] \"Hashem\"   \"John\"     \"Cecillia\" \"Minha\"    \"Parushya\" \"Keeheon\" \n\ndim(k) &lt;- c(3,2)\nk\n\n     [,1]       [,2]      \n[1,] \"Hashem\"   \"Minha\"   \n[2,] \"John\"     \"Parushya\"\n[3,] \"Cecillia\" \"Keeheon\" \n\ncolnames(k) &lt;- c(\"Section A\", \"Section B\")\n\nk\n\n     Section A  Section B \n[1,] \"Hashem\"   \"Minha\"   \n[2,] \"John\"     \"Parushya\"\n[3,] \"Cecillia\" \"Keeheon\" \n\nrownames(k) &lt;- c(\"Student 1\", \"Student 2\", \"Student 3\")\n\nk\n\n          Section A  Section B \nStudent 1 \"Hashem\"   \"Minha\"   \nStudent 2 \"John\"     \"Parushya\"\nStudent 3 \"Cecillia\" \"Keeheon\" \n\n\nBinding vectors together to make a matrix\n\n# Binding\nx &lt;- 1:3\ny &lt;- 4:6\nz &lt;- c(\"Camilla\",\"Nila\",\"Duflo\",\"Akbar\")\n\nx\n\n[1] 1 2 3\n\ny\n\n[1] 4 5 6\n\nz\n\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\nrbind(x,y) # Stitches vector row wise, or appends it horizontally\n\n  [,1] [,2] [,3]\nx    1    2    3\ny    4    5    6\n\ncbind(x,y) # Stitches vector column wise, or vertically\n\n     x y\n[1,] 1 4\n[2,] 2 5\n[3,] 3 6\n\n\n\n\n\n\nLists\nIf we want to create something that stores objects of different classes together, we use another data structure called list.\nA list can contain two or more classes of objects with different lengths.\n\n\n\n\n\n\nCreating lists\n\nlist_1 &lt;- list(\"a\" = 2.5, \"b\" = TRUE, \"c\" = 1:3)\n\nlist_1\n\n$a\n[1] 2.5\n\n$b\n[1] TRUE\n\n$c\n[1] 1 2 3\n\n\nWe created a list with objects of three different types - numeric, logical, and integer vector.\n\n# Structure of the list\nstr(list_1)\n\nList of 3\n $ a: num 2.5\n $ b: logi TRUE\n $ c: int [1:3] 1 2 3\n\n\nWe can also create a list with existing vectors.\n\n# A new vector\nname_vec &lt;- c(\"Camilla\",\"Nila\",\"Duflo\",\"Akbar\")\n\n# And then lets use the vectors we already have in the environment\nlist_2 &lt;- list(name_vec, c_logical, d_char, f_int, e_int, a_num)\nlist_2\n\n[[1]]\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\n[[2]]\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n\n[[3]]\n[1] \"Sheila\"  \"Nila\"    \"Camilla\"\n\n[[4]]\n[1] 1 2 3 4 5\n\n[[5]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n[[6]]\n[1]  0.0  0.7  9.0  2.0  3.0  4.0 -1.0\n\n\n\n# let's check the classes of objects\nclass(list_2[[2]])\nclass(list_2[[3]])\n\n# And their lengths\nlength(list_2[[2]])\nlength(list_2[[3]])\n\nAccessing elements in a List\nBy indices in a list\n\n# So lists are printed differently, and elements of a list will have [[]] i.e 2 brackets.    \n\nlist_2\n\n[[1]]\n[1] \"Camilla\" \"Nila\"    \"Duflo\"   \"Akbar\"  \n\n[[2]]\n[1]  TRUE FALSE  TRUE  TRUE  TRUE\n\n[[3]]\n[1] \"Sheila\"  \"Nila\"    \"Camilla\"\n\n[[4]]\n[1] 1 2 3 4 5\n\n[[5]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n[[6]]\n[1]  0.0  0.7  9.0  2.0  3.0  4.0 -1.0\n\n\n\n## Accessing elements | run each of the follwing lines and see the output\nlist_2[[2]] \nlist_2[2]\nlist_2[1][2]\nlist_2[[1]][1]\nlist_2[[1]][[1]]\nlist_2[[1]][2]\n\nBy using names or tags\n\nlist_3 &lt;- list(name = \"John\", age = 19, speaks = c(\"English\", \"French\"))\n\n# access elements by name\nlist_3$name\nlist_3$age\nlist_3$speaks\n\n# access elements by integer index\nlist_3[c(1, 2)]\nlist_3[-2]\n\n# access elements by logical index\nlist_3[c(TRUE, FALSE, FALSE)]\n\n# access elements by character index\nlist_3[c(\"age\", \"speaks\")]\n\nModifying lists\nAdding components in a list\n\nlist_4 &lt;- list(name = \"Clair\", age = 19, speaks = c(\"English\", \"French\"))\n\n# assign a new element to the list using double brackets [[]]\nlist_4[[\"married\"]] &lt;- FALSE\n\n# print the updated list\nlist_4\n\n$name\n[1] \"Clair\"\n\n$age\n[1] 19\n\n$speaks\n[1] \"English\" \"French\" \n\n$married\n[1] FALSE\n\n\nDeleting components in a list\n\nlist_5 &lt;- list(name = \"Clair\", age = 19, speaks = c(\"English\", \"French\"))\n\n# remove an element from the list using double brackets [[]]\nlist_5[[\"age\"]] &lt;- NULL\n\n# print the structure of the updated list\nstr(list_5)\n\nList of 2\n $ name  : chr \"Clair\"\n $ speaks: chr [1:2] \"English\" \"French\"\n\n# remove an element from the list using $ notation\nlist_5$married &lt;- NULL\n\n# print the structure of the updated list\nstr(list_5)\n\nList of 2\n $ name  : chr \"Clair\"\n $ speaks: chr [1:2] \"English\" \"French\"",
    "crumbs": [
      "Day 2 - R Basics"
    ]
  },
  {
    "objectID": "day2.html#footnotes",
    "href": "day2.html#footnotes",
    "title": "Day 2 - R Basics",
    "section": "",
    "text": "Inspired by the summary provided by Prof Aaron Williams’ course on Data Analysis offered at McCourt School. Strongly recommended to learn good coding using R↩︎",
    "crumbs": [
      "Day 2 - R Basics"
    ]
  },
  {
    "objectID": "day3.html",
    "href": "day3.html",
    "title": "Day 3 - R for Analysis",
    "section": "",
    "text": "Math Session\nCalculus I: Derivatives\nLinks",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#factors",
    "href": "day3.html#factors",
    "title": "Day 3 - R for Analysis",
    "section": "Factors",
    "text": "Factors\nFactors are used for categorical data - both nominal and ordinal ones.\nFactors are treated as a separate datatype in R. Technically, factors are stored as a vector of integer values corresponding to the character type objects which they are used to represent.\n\n\n\n\n\n\nYou can define a factor by using factor() command.\n\nvec_1 &lt;- c(\"yes\", \"no\", \"yes\")\n\nfct_1 &lt;- factor(c(\"yes\", \"no\", \"yes\"))\n\n# Notice the difference in outputs\n\nvec_1\n\n[1] \"yes\" \"no\"  \"yes\"\n\nfct_1\n\n[1] yes no  yes\nLevels: no yes\n\n\n\n# Btw, table() command cn be used in R for cross-tabulations\n# with both vector and factor datatypes. \n\ntable(vec_1)\n\nvec_1\n no yes \n  1   2 \n\ntable(fct_1)\n\nfct_1\n no yes \n  1   2 \n\n\nOrdering Factors\nSometimes it is essential to specify the orders of your factor levels. Particularly during modelling and estimation with binary or categorical variables, given that the first level of factor is used in most functions, like lm(linear regression command in R), will be treated as baseline level or category.\nFor example, we have a variable measuring dose of vaccine administered (placebo, medium, high). Here specifying order becomes important as all measurements of the treatment efficacy will have to be with respect to the baseline category.\nWe use levels() within factor() command to do this.\n\nfct_2 &lt;- factor(c(\"High\", \"High\", \"Medium\", \"Medium\", \"High\", \"High\",\"Placebo\"))\nfct_2   \n\n[1] High    High    Medium  Medium  High    High    Placebo\nLevels: High Medium Placebo\n\n# (Order is often determined using alphabetical variables by default) (H-M-P)\n\n# Ordering it\nfct_2 &lt;- factor(c(\"Placebo\", \"High\", \"Medium\", \"Placebo\", \"Medium\", \n            \"Medium\", \"High\", \"High\"),\nlevels = c(\"Placebo\",\"Medium\",\"High\"))\n\nfct_2\n\n[1] Placebo High    Medium  Placebo Medium  Medium  High    High   \nLevels: Placebo Medium High",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#dataframes",
    "href": "day3.html#dataframes",
    "title": "Day 3 - R for Analysis",
    "section": "Dataframes",
    "text": "Dataframes\nIn R, dataframes are data structure which store data in a tabular format.\n\n\n\n\n\n\nWe create dataframes using data.frame() command.\n\ndf_1 &lt;- data.frame(\n    Foo= 15:18, \n    Bar= c(T, F, T, T), \n    Name= c(\"Penny\", \"Sheldon\", \"Rajesh\", \"Leonard\")\n)\n\nExploring the contents and structure of the dataframe\n\n# Viewing dataframe\ndf_1 # In Console\nView(df_1)  # In Viewer\n\n# structure of dataframe\nstr(df_1)\n\n# Names of columns/variables\nnames(df_1)\n\n# Dimesnions of Dataframe\nnrow(df_1)      \nncol(df_1)\ndim(df_1)\n\n# Summary of dataframe\nsummary(df_1) # See the output closely | very useful for understanding the dataset\n\nAccessing the objects inside dataframe\n\n# Access Items using [] \ndf_1[1]\n\n  Foo\n1  15\n2  16\n3  17\n4  18\n\n# Access Items using [[]]\ndf_1[['Bar']]\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n# Access Items using $\ndf_1$Bar\n\n[1]  TRUE FALSE  TRUE  TRUE\n\n# Access particular data point\ndf_1$Foo[3]\n\n[1] 17\n\n# what will be the output?\ndf_1[1,3]\n\n[1] \"Penny\"\n\n\nTidyverse package has a very efficient framwork for working with dataset. Check the tidyverse book from day 2 for the same.",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#packages",
    "href": "day3.html#packages",
    "title": "Day 3 - R for Analysis",
    "section": "Packages",
    "text": "Packages\nPackages in R are containers for functions. A lot of packages are already installed when you install R.\n\n# Check available packages\nlibrary()\n\nYou can install packages from Comprehensive R Archive Network or CRAN which is an online storage of peer-reviewed and documented packages.\nThe command for loading a package is install.package().\n\n# installing package. Eg, tidyverse\n\ninstall.packages(\"tidyverse\") # You have ti run this once on system\n\nlibrary(tidyverse) # Once installed library(&lt;packagename&gt;) command loads all the functions associated with the package in the current session for use\n\n\n\n\n\n\n\nExercise 1\n\n\n\nLoad the following four packages/libraries, which we would be using later - janitor, here, readstata13, and tinytex.\n\ninstall.packages(\"&lt;package name&gt;\")\nlibrary(&lt;package name&gt;)",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day3.html#importing-and-exporting-datasets",
    "href": "day3.html#importing-and-exporting-datasets",
    "title": "Day 3 - R for Analysis",
    "section": "Importing and Exporting Datasets",
    "text": "Importing and Exporting Datasets\n\nR has a range of functions for using different types of data. But before loading datasets let’s understand the concept of working directories.\nA working directory is sort of the “office” that you operate from. They tell R where to operate from.\nWorking directories are specified using a file path i.e. the address in your computer where your script will be stored, or where your dataset is kept.\n\n# Commands:\ngetwd() # Gets the present directory or pathway where you are operating from\n     \nsetwd(\"&lt;press tab here&gt;\") # Setting new directory as working directory\n\nlist.files()  #list the files in the working directory\n\nBelow is a limited list of commands for loading/importing most commonly used dataset types.\n\nread.csv(\"FileName\") # reads CSV files / press tab inside the quotes\nread_csv(\"Pathname/filename.csv\")  \n\n# The part before :: in the following code refers to the package from where the \n#  function comes from. You will need to load those packages first.\n\nreadxl::read_excel() # read excel files\nreadxl::read_xlsx() # reads excel workbooks\nhaven::read_dta()   # reads stata dta files\n\n# example: \n    \ndataframe1 &lt;- read.csv(\"&lt;file path&gt;\")\n\n\nExercise 2Code 2\n\n\n\nDownload the folder Datasets-mathcamp from the link\nLoad datasets using the functions referred above\nExplore the contents of datasets using the functions we learned in the previous section.\nSave these datasets with a different names at a different location.\n\n\n\n\nDownload the folder Datasets-mathcamp from the link\nLoad datasets using the functions referred above.\n\nANES dataset | American National Election Study (“2016 Time Series Study,” n.d.)\n\nanes_df &lt;- read.csv(\"Datasets-mathcamp/anes_specialstudy_2020-2022_socialmedia_csv_20230705/anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv\") # base R\n\nanes_df_2 &lt;- read_csv(\"Datasets-mathcamp/anes_specialstudy_2020-2022_socialmedia_csv_20230705/anes_specialstudy_2020-2022_socialmedia_csv_20230705.csv\")  # tidyverse\n\nWorld Political Cleavages and Inequality Database\n\nwid_df &lt;- readxl::read_excel(\"Datasets-mathcamp/World Inequality Database/gmp-macro-final-party.xlsx\")\n\nDatabase on Political Institutions\n\ndpi20_df &lt;- read_dta(\"Datasets-mathcamp/DPI/DPI2020_stata13.dta\") # Why error?\ndpi20_df_2 &lt;- read.dta13(\"Datasets-mathcamp/DPI/DPI2020_stata13.dta\")\n\nVDem dataset | Varieties of democracy\n\nvdem_df &lt;- readRDS(\"Datasets-mathcamp/V-Dem-CY-Full+Others-v12.rds\")\n\n# RDS and Rdata are native R file storage formats\n\n\nExplore the contents of datasets using the functions we learned in the previous section.\n\n\n#Hint: summary, str\n\n\nSave these datsets with a different name at a different location.\n\n\n# Hint\n# write.csv() and equivalents\n\n# saveRDS and save for native R data struture types\n\n\n\n\n\nThe datasets we just practiced with are very commonly used across various subfields. The documentation is also included in the folder that we just downloaded.\n\n\n\n\n“2016 Time Series Study.” n.d. ANES | American National Election Studies. https://electionstudies.org/data-center/2016-time-series-study/.",
    "crumbs": [
      "Day 3 - R for Analysis"
    ]
  },
  {
    "objectID": "day4.html",
    "href": "day4.html",
    "title": "Day 4 - Quarto and LaTeX",
    "section": "",
    "text": "Software Session\n\nWhy Quarto\nBasics\n\n\nYaml\nCode Chunks and Options\nWriting code\n\n\nLatex\n\nQuarto R for datascience https://r4ds.hadley.nz/quarto\nhttps://quarto.org/docs/get-started/hello/rstudio.html\nhttps://www.appsilon.com/post/r-quarto-tutorial#get-started\nhttps://openscapes.github.io/quarto-website-tutorial/quarto-workflows/rstudio.html\n(https://quarto.org/docs/gallery/).\n\nFollow these instructions to install library(tinytex).",
    "crumbs": [
      "Day 4 - Quarto and LaTeX"
    ]
  },
  {
    "objectID": "day5.html",
    "href": "day5.html",
    "title": "Day 5 - File Management and Workflow",
    "section": "",
    "text": "https://happygitwithr.com/ Github link\nQuarto essay template\nQuarto paper template\nQuarto CV template\nQuarto extensions for CV and articles",
    "crumbs": [
      "Day 5 - File Management and Workflow"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Summary"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "“2016 Time Series Study.” n.d. ANES | American National\nElection Studies. https://electionstudies.org/data-center/2016-time-series-study/.",
    "crumbs": [
      "References"
    ]
  }
]